// ArduinoBLE - Version: Latest
// Bluetooth Low-Energy library for Nano 33 BLE Sense
#include <ArduinoBLE.h>

// Arduino_APDS9960 - Version: Latest 
// Proximity measurements on Nano 33 BLE Sense
#include <Arduino_APDS9960.h>

// Arduino_HTS221 - Version: Latest 
// Library for temperature and humidity measurements
// on Nano 33 BLE Sense
#include <Arduino_HTS221.h>

const char* nameOfDevice = "adBoardSensor";
// The uids for the services and characteristics offered by the device, generated by random
const char* proximityServiceUID = "7c8d0422-c197-11ed-afa1-0242ac120002";
const char* proximityCharUID = "f4e832ac-c197-11ed-afa1-0242ac120002";
const char* weatherServiceUID = "12dfaa88-c198-11ed-afa1-0242ac120002";
const char* temperatureCharUID = "26dd8136-c198-11ed-afa1-0242ac120002";

// Instanciate the offered services
BLEService proximityService(proximityServiceUID);
BLEBooleanCharacteristic proximityCharacteristic(proximityCharUID, BLERead | BLENotify);
BLEService weatherService(weatherServiceUID);
BLEFloatCharacteristic temperatureCharacteristic(temperatureCharUID, BLERead | BLENotify);

void setup() {
  // Open serial port for debugging
  Serial.begin(9600);
  while (!Serial);

  startBLE();
  startTemperatureSensor();
  startProximitySensor();

  Serial.println("BLE started succesfully");

  // Set the BLE parameters that the device advertises
  BLE.setLocalName(nameOfDevice);
  BLE.setAdvertisedService(proximityService);
  proximityService.addCharacteristic(proximityCharacteristic);
  BLE.addService(proximityService);
  BLE.setAdvertisedService(weatherService);
  weatherService.addCharacteristic(temperatureCharacteristic);
  BLE.addService(weatherService);
  BLE.advertise();
}

void loop() {  
  BLEDevice central = BLE.central();

  if (central) {
    Serial.println("Connected to central device!");

    // While at least one device is reading from the characteristics
    while (central.connected()) {
      float temperature = HTS.readTemperature();
      writeTemperature(temperature);

      if (APDS.proximityAvailable()) {
        int proximity = APDS.readProximity();
        writeProximity(proximity);
      }
      
      delay(1000);
    }
  }
}

void writeTemperature(float temperature) {
  Serial.print("Temperature = ");
  Serial.print(temperature);
  Serial.println(" Â°C");
  temperatureCharacteristic.writeValue(temperature);
}

void writeProximity(int proximity) {
  Serial.print("Proximity = ");
  Serial.println(proximity);
  // Convert proximity to a boolean value, to approximate whether a person is
  // in front of the ad board or not
  if (proximity > 200) {
    proximityCharacteristic.writeValue(false);
  }
  else {
    proximityCharacteristic.writeValue(true);
  }
 
}

void startBLE() {
  if (!BLE.begin())
  {
    Serial.println("starting BLE failed!");
    while (1);
  }
}

void startTemperatureSensor() {
  if (!HTS.begin()) {
    Serial.println("Failed to initialize humidity temperature sensor!");
    while (1);
  }  
}

void startProximitySensor() {
  if (!APDS.begin()) {
    Serial.println("Error initializing APDS-9960 sensor!");
    while(1);
  }
}


